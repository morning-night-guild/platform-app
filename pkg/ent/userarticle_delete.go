// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/morning-night-guild/platform-app/pkg/ent/predicate"
	"github.com/morning-night-guild/platform-app/pkg/ent/userarticle"
)

// UserArticleDelete is the builder for deleting a UserArticle entity.
type UserArticleDelete struct {
	config
	hooks    []Hook
	mutation *UserArticleMutation
}

// Where appends a list predicates to the UserArticleDelete builder.
func (uad *UserArticleDelete) Where(ps ...predicate.UserArticle) *UserArticleDelete {
	uad.mutation.Where(ps...)
	return uad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uad *UserArticleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uad.sqlExec, uad.mutation, uad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uad *UserArticleDelete) ExecX(ctx context.Context) int {
	n, err := uad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uad *UserArticleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userarticle.Table, sqlgraph.NewFieldSpec(userarticle.FieldID, field.TypeUUID))
	if ps := uad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uad.mutation.done = true
	return affected, err
}

// UserArticleDeleteOne is the builder for deleting a single UserArticle entity.
type UserArticleDeleteOne struct {
	uad *UserArticleDelete
}

// Where appends a list predicates to the UserArticleDelete builder.
func (uado *UserArticleDeleteOne) Where(ps ...predicate.UserArticle) *UserArticleDeleteOne {
	uado.uad.mutation.Where(ps...)
	return uado
}

// Exec executes the deletion query.
func (uado *UserArticleDeleteOne) Exec(ctx context.Context) error {
	n, err := uado.uad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userarticle.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uado *UserArticleDeleteOne) ExecX(ctx context.Context) {
	if err := uado.Exec(ctx); err != nil {
		panic(err)
	}
}
