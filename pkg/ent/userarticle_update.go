// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/morning-night-guild/platform-app/pkg/ent/article"
	"github.com/morning-night-guild/platform-app/pkg/ent/predicate"
	"github.com/morning-night-guild/platform-app/pkg/ent/userarticle"
)

// UserArticleUpdate is the builder for updating UserArticle entities.
type UserArticleUpdate struct {
	config
	hooks    []Hook
	mutation *UserArticleMutation
}

// Where appends a list predicates to the UserArticleUpdate builder.
func (uau *UserArticleUpdate) Where(ps ...predicate.UserArticle) *UserArticleUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetArticleID sets the "article_id" field.
func (uau *UserArticleUpdate) SetArticleID(u uuid.UUID) *UserArticleUpdate {
	uau.mutation.SetArticleID(u)
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserArticleUpdate) SetUserID(u uuid.UUID) *UserArticleUpdate {
	uau.mutation.SetUserID(u)
	return uau
}

// SetCreatedAt sets the "created_at" field.
func (uau *UserArticleUpdate) SetCreatedAt(t time.Time) *UserArticleUpdate {
	uau.mutation.SetCreatedAt(t)
	return uau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uau *UserArticleUpdate) SetNillableCreatedAt(t *time.Time) *UserArticleUpdate {
	if t != nil {
		uau.SetCreatedAt(*t)
	}
	return uau
}

// SetUpdatedAt sets the "updated_at" field.
func (uau *UserArticleUpdate) SetUpdatedAt(t time.Time) *UserArticleUpdate {
	uau.mutation.SetUpdatedAt(t)
	return uau
}

// SetArticle sets the "article" edge to the Article entity.
func (uau *UserArticleUpdate) SetArticle(a *Article) *UserArticleUpdate {
	return uau.SetArticleID(a.ID)
}

// Mutation returns the UserArticleMutation object of the builder.
func (uau *UserArticleUpdate) Mutation() *UserArticleMutation {
	return uau.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (uau *UserArticleUpdate) ClearArticle() *UserArticleUpdate {
	uau.mutation.ClearArticle()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserArticleUpdate) Save(ctx context.Context) (int, error) {
	uau.defaults()
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserArticleUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserArticleUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uau *UserArticleUpdate) defaults() {
	if _, ok := uau.mutation.UpdatedAt(); !ok {
		v := userarticle.UpdateDefaultUpdatedAt()
		uau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserArticleUpdate) check() error {
	if _, ok := uau.mutation.ArticleID(); uau.mutation.ArticleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserArticle.article"`)
	}
	return nil
}

func (uau *UserArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userarticle.Table, userarticle.Columns, sqlgraph.NewFieldSpec(userarticle.FieldID, field.TypeUUID))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UserID(); ok {
		_spec.SetField(userarticle.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := uau.mutation.CreatedAt(); ok {
		_spec.SetField(userarticle.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.SetField(userarticle.FieldUpdatedAt, field.TypeTime, value)
	}
	if uau.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userarticle.ArticleTable,
			Columns: []string{userarticle.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userarticle.ArticleTable,
			Columns: []string{userarticle.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userarticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserArticleUpdateOne is the builder for updating a single UserArticle entity.
type UserArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserArticleMutation
}

// SetArticleID sets the "article_id" field.
func (uauo *UserArticleUpdateOne) SetArticleID(u uuid.UUID) *UserArticleUpdateOne {
	uauo.mutation.SetArticleID(u)
	return uauo
}

// SetUserID sets the "user_id" field.
func (uauo *UserArticleUpdateOne) SetUserID(u uuid.UUID) *UserArticleUpdateOne {
	uauo.mutation.SetUserID(u)
	return uauo
}

// SetCreatedAt sets the "created_at" field.
func (uauo *UserArticleUpdateOne) SetCreatedAt(t time.Time) *UserArticleUpdateOne {
	uauo.mutation.SetCreatedAt(t)
	return uauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uauo *UserArticleUpdateOne) SetNillableCreatedAt(t *time.Time) *UserArticleUpdateOne {
	if t != nil {
		uauo.SetCreatedAt(*t)
	}
	return uauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uauo *UserArticleUpdateOne) SetUpdatedAt(t time.Time) *UserArticleUpdateOne {
	uauo.mutation.SetUpdatedAt(t)
	return uauo
}

// SetArticle sets the "article" edge to the Article entity.
func (uauo *UserArticleUpdateOne) SetArticle(a *Article) *UserArticleUpdateOne {
	return uauo.SetArticleID(a.ID)
}

// Mutation returns the UserArticleMutation object of the builder.
func (uauo *UserArticleUpdateOne) Mutation() *UserArticleMutation {
	return uauo.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (uauo *UserArticleUpdateOne) ClearArticle() *UserArticleUpdateOne {
	uauo.mutation.ClearArticle()
	return uauo
}

// Where appends a list predicates to the UserArticleUpdate builder.
func (uauo *UserArticleUpdateOne) Where(ps ...predicate.UserArticle) *UserArticleUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserArticleUpdateOne) Select(field string, fields ...string) *UserArticleUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserArticle entity.
func (uauo *UserArticleUpdateOne) Save(ctx context.Context) (*UserArticle, error) {
	uauo.defaults()
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserArticleUpdateOne) SaveX(ctx context.Context) *UserArticle {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserArticleUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uauo *UserArticleUpdateOne) defaults() {
	if _, ok := uauo.mutation.UpdatedAt(); !ok {
		v := userarticle.UpdateDefaultUpdatedAt()
		uauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserArticleUpdateOne) check() error {
	if _, ok := uauo.mutation.ArticleID(); uauo.mutation.ArticleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserArticle.article"`)
	}
	return nil
}

func (uauo *UserArticleUpdateOne) sqlSave(ctx context.Context) (_node *UserArticle, err error) {
	if err := uauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userarticle.Table, userarticle.Columns, sqlgraph.NewFieldSpec(userarticle.FieldID, field.TypeUUID))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserArticle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userarticle.FieldID)
		for _, f := range fields {
			if !userarticle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userarticle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.UserID(); ok {
		_spec.SetField(userarticle.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := uauo.mutation.CreatedAt(); ok {
		_spec.SetField(userarticle.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.SetField(userarticle.FieldUpdatedAt, field.TypeTime, value)
	}
	if uauo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userarticle.ArticleTable,
			Columns: []string{userarticle.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userarticle.ArticleTable,
			Columns: []string{userarticle.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserArticle{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userarticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
