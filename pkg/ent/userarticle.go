// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/morning-night-guild/platform-app/pkg/ent/article"
	"github.com/morning-night-guild/platform-app/pkg/ent/user"
	"github.com/morning-night-guild/platform-app/pkg/ent/userarticle"
)

// UserArticle is the model entity for the UserArticle schema.
type UserArticle struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ArticleID holds the value of the "article_id" field.
	ArticleID uuid.UUID `json:"article_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserArticleQuery when eager-loading is set.
	Edges        UserArticleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserArticleEdges holds the relations/edges for other nodes in the graph.
type UserArticleEdges struct {
	// Article holds the value of the article edge.
	Article *Article `json:"article,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserArticleEdges) ArticleOrErr() (*Article, error) {
	if e.loadedTypes[0] {
		if e.Article == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: article.Label}
		}
		return e.Article, nil
	}
	return nil, &NotLoadedError{edge: "article"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserArticleEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserArticle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userarticle.FieldCreatedAt, userarticle.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userarticle.FieldID, userarticle.FieldArticleID, userarticle.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserArticle fields.
func (ua *UserArticle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userarticle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ua.ID = *value
			}
		case userarticle.FieldArticleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value != nil {
				ua.ArticleID = *value
			}
		case userarticle.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ua.UserID = *value
			}
		case userarticle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ua.CreatedAt = value.Time
			}
		case userarticle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ua.UpdatedAt = value.Time
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserArticle.
// This includes values selected through modifiers, order, etc.
func (ua *UserArticle) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryArticle queries the "article" edge of the UserArticle entity.
func (ua *UserArticle) QueryArticle() *ArticleQuery {
	return NewUserArticleClient(ua.config).QueryArticle(ua)
}

// QueryUser queries the "user" edge of the UserArticle entity.
func (ua *UserArticle) QueryUser() *UserQuery {
	return NewUserArticleClient(ua.config).QueryUser(ua)
}

// Update returns a builder for updating this UserArticle.
// Note that you need to call UserArticle.Unwrap() before calling this method if this UserArticle
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserArticle) Update() *UserArticleUpdateOne {
	return NewUserArticleClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserArticle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserArticle) Unwrap() *UserArticle {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserArticle is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserArticle) String() string {
	var builder strings.Builder
	builder.WriteString("UserArticle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("article_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.ArticleID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ua.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ua.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserArticles is a parsable slice of UserArticle.
type UserArticles []*UserArticle
