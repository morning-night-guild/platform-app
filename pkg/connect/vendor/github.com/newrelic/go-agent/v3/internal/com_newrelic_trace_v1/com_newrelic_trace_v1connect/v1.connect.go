// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vendor/github.com/newrelic/go-agent/v3/internal/com_newrelic_trace_v1/v1.proto

package com_newrelic_trace_v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	com_newrelic_trace_v1 "github.com/newrelic/go-agent/v3/internal/com_newrelic_trace_v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IngestServiceName is the fully-qualified name of the IngestService service.
	IngestServiceName = "com.newrelic.trace.v1.IngestService"
)

// IngestServiceClient is a client for the com.newrelic.trace.v1.IngestService service.
type IngestServiceClient interface {
	// Accepts a stream of Span messages, and returns an irregular stream of
	// RecordStatus messages.
	RecordSpan(context.Context) *connect_go.BidiStreamForClient[com_newrelic_trace_v1.Span, com_newrelic_trace_v1.RecordStatus]
	// Accepts a stream of SpanBatch messages, and returns an irregular
	// stream of RecordStatus messages. This endpoint can be used to improve
	// throughput when Span messages are small
	RecordSpanBatch(context.Context) *connect_go.BidiStreamForClient[com_newrelic_trace_v1.SpanBatch, com_newrelic_trace_v1.RecordStatus]
}

// NewIngestServiceClient constructs a client for the com.newrelic.trace.v1.IngestService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIngestServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IngestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ingestServiceClient{
		recordSpan: connect_go.NewClient[com_newrelic_trace_v1.Span, com_newrelic_trace_v1.RecordStatus](
			httpClient,
			baseURL+"/com.newrelic.trace.v1.IngestService/RecordSpan",
			opts...,
		),
		recordSpanBatch: connect_go.NewClient[com_newrelic_trace_v1.SpanBatch, com_newrelic_trace_v1.RecordStatus](
			httpClient,
			baseURL+"/com.newrelic.trace.v1.IngestService/RecordSpanBatch",
			opts...,
		),
	}
}

// ingestServiceClient implements IngestServiceClient.
type ingestServiceClient struct {
	recordSpan      *connect_go.Client[com_newrelic_trace_v1.Span, com_newrelic_trace_v1.RecordStatus]
	recordSpanBatch *connect_go.Client[com_newrelic_trace_v1.SpanBatch, com_newrelic_trace_v1.RecordStatus]
}

// RecordSpan calls com.newrelic.trace.v1.IngestService.RecordSpan.
func (c *ingestServiceClient) RecordSpan(ctx context.Context) *connect_go.BidiStreamForClient[com_newrelic_trace_v1.Span, com_newrelic_trace_v1.RecordStatus] {
	return c.recordSpan.CallBidiStream(ctx)
}

// RecordSpanBatch calls com.newrelic.trace.v1.IngestService.RecordSpanBatch.
func (c *ingestServiceClient) RecordSpanBatch(ctx context.Context) *connect_go.BidiStreamForClient[com_newrelic_trace_v1.SpanBatch, com_newrelic_trace_v1.RecordStatus] {
	return c.recordSpanBatch.CallBidiStream(ctx)
}

// IngestServiceHandler is an implementation of the com.newrelic.trace.v1.IngestService service.
type IngestServiceHandler interface {
	// Accepts a stream of Span messages, and returns an irregular stream of
	// RecordStatus messages.
	RecordSpan(context.Context, *connect_go.BidiStream[com_newrelic_trace_v1.Span, com_newrelic_trace_v1.RecordStatus]) error
	// Accepts a stream of SpanBatch messages, and returns an irregular
	// stream of RecordStatus messages. This endpoint can be used to improve
	// throughput when Span messages are small
	RecordSpanBatch(context.Context, *connect_go.BidiStream[com_newrelic_trace_v1.SpanBatch, com_newrelic_trace_v1.RecordStatus]) error
}

// NewIngestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIngestServiceHandler(svc IngestServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/com.newrelic.trace.v1.IngestService/RecordSpan", connect_go.NewBidiStreamHandler(
		"/com.newrelic.trace.v1.IngestService/RecordSpan",
		svc.RecordSpan,
		opts...,
	))
	mux.Handle("/com.newrelic.trace.v1.IngestService/RecordSpanBatch", connect_go.NewBidiStreamHandler(
		"/com.newrelic.trace.v1.IngestService/RecordSpanBatch",
		svc.RecordSpanBatch,
		opts...,
	))
	return "/com.newrelic.trace.v1.IngestService/", mux
}

// UnimplementedIngestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIngestServiceHandler struct{}

func (UnimplementedIngestServiceHandler) RecordSpan(context.Context, *connect_go.BidiStream[com_newrelic_trace_v1.Span, com_newrelic_trace_v1.RecordStatus]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("com.newrelic.trace.v1.IngestService.RecordSpan is not implemented"))
}

func (UnimplementedIngestServiceHandler) RecordSpanBatch(context.Context, *connect_go.BidiStream[com_newrelic_trace_v1.SpanBatch, com_newrelic_trace_v1.RecordStatus]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("com.newrelic.trace.v1.IngestService.RecordSpanBatch is not implemented"))
}
