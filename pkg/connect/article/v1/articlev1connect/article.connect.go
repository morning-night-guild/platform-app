// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: article/v1/article.proto

package articlev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/morning-night-guild/platform-app/pkg/connect/article/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ArticleServiceName is the fully-qualified name of the ArticleService service.
	ArticleServiceName = "article.v1.ArticleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArticleServiceShareProcedure is the fully-qualified name of the ArticleService's Share RPC.
	ArticleServiceShareProcedure = "/article.v1.ArticleService/Share"
	// ArticleServiceListProcedure is the fully-qualified name of the ArticleService's List RPC.
	ArticleServiceListProcedure = "/article.v1.ArticleService/List"
	// ArticleServiceListByUserProcedure is the fully-qualified name of the ArticleService's ListByUser
	// RPC.
	ArticleServiceListByUserProcedure = "/article.v1.ArticleService/ListByUser"
	// ArticleServiceDeleteProcedure is the fully-qualified name of the ArticleService's Delete RPC.
	ArticleServiceDeleteProcedure = "/article.v1.ArticleService/Delete"
	// ArticleServiceAddToUserProcedure is the fully-qualified name of the ArticleService's AddToUser
	// RPC.
	ArticleServiceAddToUserProcedure = "/article.v1.ArticleService/AddToUser"
	// ArticleServiceRemoveFromUserProcedure is the fully-qualified name of the ArticleService's
	// RemoveFromUser RPC.
	ArticleServiceRemoveFromUserProcedure = "/article.v1.ArticleService/RemoveFromUser"
)

// ArticleServiceClient is a client for the article.v1.ArticleService service.
type ArticleServiceClient interface {
	// 共有
	Share(context.Context, *connect_go.Request[v1.ShareRequest]) (*connect_go.Response[v1.ShareResponse], error)
	// 一覧
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	// 一覧取得(ユーザーごと)
	ListByUser(context.Context, *connect_go.Request[v1.ListByUserRequest]) (*connect_go.Response[v1.ListByUserResponse], error)
	// 削除
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	// 追加
	AddToUser(context.Context, *connect_go.Request[v1.AddToUserRequest]) (*connect_go.Response[v1.AddToUserResponse], error)
	// 削除
	RemoveFromUser(context.Context, *connect_go.Request[v1.RemoveFromUserRequest]) (*connect_go.Response[v1.RemoveFromUserResponse], error)
}

// NewArticleServiceClient constructs a client for the article.v1.ArticleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ArticleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &articleServiceClient{
		share: connect_go.NewClient[v1.ShareRequest, v1.ShareResponse](
			httpClient,
			baseURL+ArticleServiceShareProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+ArticleServiceListProcedure,
			opts...,
		),
		listByUser: connect_go.NewClient[v1.ListByUserRequest, v1.ListByUserResponse](
			httpClient,
			baseURL+ArticleServiceListByUserProcedure,
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+ArticleServiceDeleteProcedure,
			opts...,
		),
		addToUser: connect_go.NewClient[v1.AddToUserRequest, v1.AddToUserResponse](
			httpClient,
			baseURL+ArticleServiceAddToUserProcedure,
			opts...,
		),
		removeFromUser: connect_go.NewClient[v1.RemoveFromUserRequest, v1.RemoveFromUserResponse](
			httpClient,
			baseURL+ArticleServiceRemoveFromUserProcedure,
			opts...,
		),
	}
}

// articleServiceClient implements ArticleServiceClient.
type articleServiceClient struct {
	share          *connect_go.Client[v1.ShareRequest, v1.ShareResponse]
	list           *connect_go.Client[v1.ListRequest, v1.ListResponse]
	listByUser     *connect_go.Client[v1.ListByUserRequest, v1.ListByUserResponse]
	delete         *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
	addToUser      *connect_go.Client[v1.AddToUserRequest, v1.AddToUserResponse]
	removeFromUser *connect_go.Client[v1.RemoveFromUserRequest, v1.RemoveFromUserResponse]
}

// Share calls article.v1.ArticleService.Share.
func (c *articleServiceClient) Share(ctx context.Context, req *connect_go.Request[v1.ShareRequest]) (*connect_go.Response[v1.ShareResponse], error) {
	return c.share.CallUnary(ctx, req)
}

// List calls article.v1.ArticleService.List.
func (c *articleServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// ListByUser calls article.v1.ArticleService.ListByUser.
func (c *articleServiceClient) ListByUser(ctx context.Context, req *connect_go.Request[v1.ListByUserRequest]) (*connect_go.Response[v1.ListByUserResponse], error) {
	return c.listByUser.CallUnary(ctx, req)
}

// Delete calls article.v1.ArticleService.Delete.
func (c *articleServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// AddToUser calls article.v1.ArticleService.AddToUser.
func (c *articleServiceClient) AddToUser(ctx context.Context, req *connect_go.Request[v1.AddToUserRequest]) (*connect_go.Response[v1.AddToUserResponse], error) {
	return c.addToUser.CallUnary(ctx, req)
}

// RemoveFromUser calls article.v1.ArticleService.RemoveFromUser.
func (c *articleServiceClient) RemoveFromUser(ctx context.Context, req *connect_go.Request[v1.RemoveFromUserRequest]) (*connect_go.Response[v1.RemoveFromUserResponse], error) {
	return c.removeFromUser.CallUnary(ctx, req)
}

// ArticleServiceHandler is an implementation of the article.v1.ArticleService service.
type ArticleServiceHandler interface {
	// 共有
	Share(context.Context, *connect_go.Request[v1.ShareRequest]) (*connect_go.Response[v1.ShareResponse], error)
	// 一覧
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	// 一覧取得(ユーザーごと)
	ListByUser(context.Context, *connect_go.Request[v1.ListByUserRequest]) (*connect_go.Response[v1.ListByUserResponse], error)
	// 削除
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	// 追加
	AddToUser(context.Context, *connect_go.Request[v1.AddToUserRequest]) (*connect_go.Response[v1.AddToUserResponse], error)
	// 削除
	RemoveFromUser(context.Context, *connect_go.Request[v1.RemoveFromUserRequest]) (*connect_go.Response[v1.RemoveFromUserResponse], error)
}

// NewArticleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticleServiceHandler(svc ArticleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ArticleServiceShareProcedure, connect_go.NewUnaryHandler(
		ArticleServiceShareProcedure,
		svc.Share,
		opts...,
	))
	mux.Handle(ArticleServiceListProcedure, connect_go.NewUnaryHandler(
		ArticleServiceListProcedure,
		svc.List,
		opts...,
	))
	mux.Handle(ArticleServiceListByUserProcedure, connect_go.NewUnaryHandler(
		ArticleServiceListByUserProcedure,
		svc.ListByUser,
		opts...,
	))
	mux.Handle(ArticleServiceDeleteProcedure, connect_go.NewUnaryHandler(
		ArticleServiceDeleteProcedure,
		svc.Delete,
		opts...,
	))
	mux.Handle(ArticleServiceAddToUserProcedure, connect_go.NewUnaryHandler(
		ArticleServiceAddToUserProcedure,
		svc.AddToUser,
		opts...,
	))
	mux.Handle(ArticleServiceRemoveFromUserProcedure, connect_go.NewUnaryHandler(
		ArticleServiceRemoveFromUserProcedure,
		svc.RemoveFromUser,
		opts...,
	))
	return "/article.v1.ArticleService/", mux
}

// UnimplementedArticleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticleServiceHandler struct{}

func (UnimplementedArticleServiceHandler) Share(context.Context, *connect_go.Request[v1.ShareRequest]) (*connect_go.Response[v1.ShareResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("article.v1.ArticleService.Share is not implemented"))
}

func (UnimplementedArticleServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("article.v1.ArticleService.List is not implemented"))
}

func (UnimplementedArticleServiceHandler) ListByUser(context.Context, *connect_go.Request[v1.ListByUserRequest]) (*connect_go.Response[v1.ListByUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("article.v1.ArticleService.ListByUser is not implemented"))
}

func (UnimplementedArticleServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("article.v1.ArticleService.Delete is not implemented"))
}

func (UnimplementedArticleServiceHandler) AddToUser(context.Context, *connect_go.Request[v1.AddToUserRequest]) (*connect_go.Response[v1.AddToUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("article.v1.ArticleService.AddToUser is not implemented"))
}

func (UnimplementedArticleServiceHandler) RemoveFromUser(context.Context, *connect_go.Request[v1.RemoveFromUserRequest]) (*connect_go.Response[v1.RemoveFromUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("article.v1.ArticleService.RemoveFromUser is not implemented"))
}
