// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// V1ArticleList request
	V1ArticleList(ctx context.Context, params *V1ArticleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ArticleShare request with any body
	V1ArticleShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1ArticleShare(ctx context.Context, body V1ArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ArticleRemoveOwn request
	V1ArticleRemoveOwn(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ArticleAddOwn request
	V1ArticleAddOwn(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthInvite request with any body
	V1AuthInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AuthInvite(ctx context.Context, body V1AuthInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthJoin request with any body
	V1AuthJoinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AuthJoin(ctx context.Context, body V1AuthJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthChangePassword request with any body
	V1AuthChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AuthChangePassword(ctx context.Context, body V1AuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthRefresh request
	V1AuthRefresh(ctx context.Context, params *V1AuthRefreshParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthSignIn request with any body
	V1AuthSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AuthSignIn(ctx context.Context, body V1AuthSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthSignOut request
	V1AuthSignOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthSignOutAll request
	V1AuthSignOutAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthSignUp request with any body
	V1AuthSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AuthSignUp(ctx context.Context, body V1AuthSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AuthVerify request
	V1AuthVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1HealthAPI request
	V1HealthAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1HealthCore request
	V1HealthCore(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1InternalArticleShare request with any body
	V1InternalArticleShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1InternalArticleShare(ctx context.Context, body V1InternalArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1InternalArticleDelete request
	V1InternalArticleDelete(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) V1ArticleList(ctx context.Context, params *V1ArticleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ArticleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ArticleShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ArticleShareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ArticleShare(ctx context.Context, body V1ArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ArticleShareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ArticleRemoveOwn(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ArticleRemoveOwnRequest(c.Server, articleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ArticleAddOwn(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ArticleAddOwnRequest(c.Server, articleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthInvite(ctx context.Context, body V1AuthInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthInviteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthJoinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthJoinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthJoin(ctx context.Context, body V1AuthJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthJoinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthChangePassword(ctx context.Context, body V1AuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthRefresh(ctx context.Context, params *V1AuthRefreshParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthRefreshRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthSignInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthSignIn(ctx context.Context, body V1AuthSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthSignInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthSignOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthSignOutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthSignOutAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthSignOutAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthSignUpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthSignUp(ctx context.Context, body V1AuthSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthSignUpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AuthVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AuthVerifyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1HealthAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1HealthAPIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1HealthCore(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1HealthCoreRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1InternalArticleShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1InternalArticleShareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1InternalArticleShare(ctx context.Context, body V1InternalArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1InternalArticleShareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1InternalArticleDelete(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1InternalArticleDeleteRequest(c.Server, articleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewV1ArticleListRequest generates requests for V1ArticleList
func NewV1ArticleListRequest(server string, params *V1ArticleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxPageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxPageSize", runtime.ParamLocationQuery, *params.MaxPageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1ArticleShareRequest calls the generic V1ArticleShare builder with application/json body
func NewV1ArticleShareRequest(server string, body V1ArticleShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1ArticleShareRequestWithBody(server, "application/json", bodyReader)
}

// NewV1ArticleShareRequestWithBody generates requests for V1ArticleShare with any type of body
func NewV1ArticleShareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1ArticleRemoveOwnRequest generates requests for V1ArticleRemoveOwn
func NewV1ArticleRemoveOwnRequest(server string, articleId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", true, "articleId", runtime.ParamLocationPath, articleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1ArticleAddOwnRequest generates requests for V1ArticleAddOwn
func NewV1ArticleAddOwnRequest(server string, articleId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", true, "articleId", runtime.ParamLocationPath, articleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1AuthInviteRequest calls the generic V1AuthInvite builder with application/json body
func NewV1AuthInviteRequest(server string, body V1AuthInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AuthInviteRequestWithBody(server, "application/json", bodyReader)
}

// NewV1AuthInviteRequestWithBody generates requests for V1AuthInvite with any type of body
func NewV1AuthInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1AuthJoinRequest calls the generic V1AuthJoin builder with application/json body
func NewV1AuthJoinRequest(server string, body V1AuthJoinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AuthJoinRequestWithBody(server, "application/json", bodyReader)
}

// NewV1AuthJoinRequestWithBody generates requests for V1AuthJoin with any type of body
func NewV1AuthJoinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/join")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1AuthChangePasswordRequest calls the generic V1AuthChangePassword builder with application/json body
func NewV1AuthChangePasswordRequest(server string, body V1AuthChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AuthChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewV1AuthChangePasswordRequestWithBody generates requests for V1AuthChangePassword with any type of body
func NewV1AuthChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1AuthRefreshRequest generates requests for V1AuthRefresh
func NewV1AuthRefreshRequest(server string, params *V1AuthRefreshParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signature", runtime.ParamLocationQuery, params.Signature); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExpiresIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiresIn", runtime.ParamLocationQuery, *params.ExpiresIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1AuthSignInRequest calls the generic V1AuthSignIn builder with application/json body
func NewV1AuthSignInRequest(server string, body V1AuthSignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AuthSignInRequestWithBody(server, "application/json", bodyReader)
}

// NewV1AuthSignInRequestWithBody generates requests for V1AuthSignIn with any type of body
func NewV1AuthSignInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1AuthSignOutRequest generates requests for V1AuthSignOut
func NewV1AuthSignOutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/signout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1AuthSignOutAllRequest generates requests for V1AuthSignOutAll
func NewV1AuthSignOutAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/signout/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1AuthSignUpRequest calls the generic V1AuthSignUp builder with application/json body
func NewV1AuthSignUpRequest(server string, body V1AuthSignUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AuthSignUpRequestWithBody(server, "application/json", bodyReader)
}

// NewV1AuthSignUpRequestWithBody generates requests for V1AuthSignUp with any type of body
func NewV1AuthSignUpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1AuthVerifyRequest generates requests for V1AuthVerify
func NewV1AuthVerifyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1HealthAPIRequest generates requests for V1HealthAPI
func NewV1HealthAPIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1HealthCoreRequest generates requests for V1HealthCore
func NewV1HealthCoreRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health/core")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1InternalArticleShareRequest calls the generic V1InternalArticleShare builder with application/json body
func NewV1InternalArticleShareRequest(server string, body V1InternalArticleShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1InternalArticleShareRequestWithBody(server, "application/json", bodyReader)
}

// NewV1InternalArticleShareRequestWithBody generates requests for V1InternalArticleShare with any type of body
func NewV1InternalArticleShareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internal/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1InternalArticleDeleteRequest generates requests for V1InternalArticleDelete
func NewV1InternalArticleDeleteRequest(server string, articleId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", true, "articleId", runtime.ParamLocationPath, articleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/internal/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// V1ArticleList request
	V1ArticleListWithResponse(ctx context.Context, params *V1ArticleListParams, reqEditors ...RequestEditorFn) (*V1ArticleListResponse, error)

	// V1ArticleShare request with any body
	V1ArticleShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1ArticleShareResponse, error)

	V1ArticleShareWithResponse(ctx context.Context, body V1ArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*V1ArticleShareResponse, error)

	// V1ArticleRemoveOwn request
	V1ArticleRemoveOwnWithResponse(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*V1ArticleRemoveOwnResponse, error)

	// V1ArticleAddOwn request
	V1ArticleAddOwnWithResponse(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*V1ArticleAddOwnResponse, error)

	// V1AuthInvite request with any body
	V1AuthInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthInviteResponse, error)

	V1AuthInviteWithResponse(ctx context.Context, body V1AuthInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthInviteResponse, error)

	// V1AuthJoin request with any body
	V1AuthJoinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthJoinResponse, error)

	V1AuthJoinWithResponse(ctx context.Context, body V1AuthJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthJoinResponse, error)

	// V1AuthChangePassword request with any body
	V1AuthChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthChangePasswordResponse, error)

	V1AuthChangePasswordWithResponse(ctx context.Context, body V1AuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthChangePasswordResponse, error)

	// V1AuthRefresh request
	V1AuthRefreshWithResponse(ctx context.Context, params *V1AuthRefreshParams, reqEditors ...RequestEditorFn) (*V1AuthRefreshResponse, error)

	// V1AuthSignIn request with any body
	V1AuthSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthSignInResponse, error)

	V1AuthSignInWithResponse(ctx context.Context, body V1AuthSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthSignInResponse, error)

	// V1AuthSignOut request
	V1AuthSignOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1AuthSignOutResponse, error)

	// V1AuthSignOutAll request
	V1AuthSignOutAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1AuthSignOutAllResponse, error)

	// V1AuthSignUp request with any body
	V1AuthSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthSignUpResponse, error)

	V1AuthSignUpWithResponse(ctx context.Context, body V1AuthSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthSignUpResponse, error)

	// V1AuthVerify request
	V1AuthVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1AuthVerifyResponse, error)

	// V1HealthAPI request
	V1HealthAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1HealthAPIResponse, error)

	// V1HealthCore request
	V1HealthCoreWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1HealthCoreResponse, error)

	// V1InternalArticleShare request with any body
	V1InternalArticleShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1InternalArticleShareResponse, error)

	V1InternalArticleShareWithResponse(ctx context.Context, body V1InternalArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*V1InternalArticleShareResponse, error)

	// V1InternalArticleDelete request
	V1InternalArticleDeleteWithResponse(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*V1InternalArticleDeleteResponse, error)
}

type V1ArticleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ArticleListResponseSchema
}

// Status returns HTTPResponse.Status
func (r V1ArticleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ArticleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ArticleShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1ArticleShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ArticleShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ArticleRemoveOwnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1ArticleRemoveOwnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ArticleRemoveOwnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ArticleAddOwnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1ArticleAddOwnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ArticleAddOwnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AuthInviteResponseSchema
}

// Status returns HTTPResponse.Status
func (r V1AuthInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ArticleListResponseSchema
}

// Status returns HTTPResponse.Status
func (r V1AuthJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1AuthChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1AuthRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1AuthSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthSignOutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1AuthSignOutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthSignOutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthSignOutAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1AuthSignOutAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthSignOutAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthSignUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1AuthSignUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthSignUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AuthVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *V1AuthVerifyUnauthorizedResponseSchema
}

// Status returns HTTPResponse.Status
func (r V1AuthVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AuthVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1HealthAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1HealthAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1HealthAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1HealthCoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1HealthCoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1HealthCoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1InternalArticleShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1InternalArticleShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1InternalArticleShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1InternalArticleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1InternalArticleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1InternalArticleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// V1ArticleListWithResponse request returning *V1ArticleListResponse
func (c *ClientWithResponses) V1ArticleListWithResponse(ctx context.Context, params *V1ArticleListParams, reqEditors ...RequestEditorFn) (*V1ArticleListResponse, error) {
	rsp, err := c.V1ArticleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ArticleListResponse(rsp)
}

// V1ArticleShareWithBodyWithResponse request with arbitrary body returning *V1ArticleShareResponse
func (c *ClientWithResponses) V1ArticleShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1ArticleShareResponse, error) {
	rsp, err := c.V1ArticleShareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ArticleShareResponse(rsp)
}

func (c *ClientWithResponses) V1ArticleShareWithResponse(ctx context.Context, body V1ArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*V1ArticleShareResponse, error) {
	rsp, err := c.V1ArticleShare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ArticleShareResponse(rsp)
}

// V1ArticleRemoveOwnWithResponse request returning *V1ArticleRemoveOwnResponse
func (c *ClientWithResponses) V1ArticleRemoveOwnWithResponse(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*V1ArticleRemoveOwnResponse, error) {
	rsp, err := c.V1ArticleRemoveOwn(ctx, articleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ArticleRemoveOwnResponse(rsp)
}

// V1ArticleAddOwnWithResponse request returning *V1ArticleAddOwnResponse
func (c *ClientWithResponses) V1ArticleAddOwnWithResponse(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*V1ArticleAddOwnResponse, error) {
	rsp, err := c.V1ArticleAddOwn(ctx, articleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ArticleAddOwnResponse(rsp)
}

// V1AuthInviteWithBodyWithResponse request with arbitrary body returning *V1AuthInviteResponse
func (c *ClientWithResponses) V1AuthInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthInviteResponse, error) {
	rsp, err := c.V1AuthInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthInviteResponse(rsp)
}

func (c *ClientWithResponses) V1AuthInviteWithResponse(ctx context.Context, body V1AuthInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthInviteResponse, error) {
	rsp, err := c.V1AuthInvite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthInviteResponse(rsp)
}

// V1AuthJoinWithBodyWithResponse request with arbitrary body returning *V1AuthJoinResponse
func (c *ClientWithResponses) V1AuthJoinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthJoinResponse, error) {
	rsp, err := c.V1AuthJoinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthJoinResponse(rsp)
}

func (c *ClientWithResponses) V1AuthJoinWithResponse(ctx context.Context, body V1AuthJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthJoinResponse, error) {
	rsp, err := c.V1AuthJoin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthJoinResponse(rsp)
}

// V1AuthChangePasswordWithBodyWithResponse request with arbitrary body returning *V1AuthChangePasswordResponse
func (c *ClientWithResponses) V1AuthChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthChangePasswordResponse, error) {
	rsp, err := c.V1AuthChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) V1AuthChangePasswordWithResponse(ctx context.Context, body V1AuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthChangePasswordResponse, error) {
	rsp, err := c.V1AuthChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthChangePasswordResponse(rsp)
}

// V1AuthRefreshWithResponse request returning *V1AuthRefreshResponse
func (c *ClientWithResponses) V1AuthRefreshWithResponse(ctx context.Context, params *V1AuthRefreshParams, reqEditors ...RequestEditorFn) (*V1AuthRefreshResponse, error) {
	rsp, err := c.V1AuthRefresh(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthRefreshResponse(rsp)
}

// V1AuthSignInWithBodyWithResponse request with arbitrary body returning *V1AuthSignInResponse
func (c *ClientWithResponses) V1AuthSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthSignInResponse, error) {
	rsp, err := c.V1AuthSignInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthSignInResponse(rsp)
}

func (c *ClientWithResponses) V1AuthSignInWithResponse(ctx context.Context, body V1AuthSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthSignInResponse, error) {
	rsp, err := c.V1AuthSignIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthSignInResponse(rsp)
}

// V1AuthSignOutWithResponse request returning *V1AuthSignOutResponse
func (c *ClientWithResponses) V1AuthSignOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1AuthSignOutResponse, error) {
	rsp, err := c.V1AuthSignOut(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthSignOutResponse(rsp)
}

// V1AuthSignOutAllWithResponse request returning *V1AuthSignOutAllResponse
func (c *ClientWithResponses) V1AuthSignOutAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1AuthSignOutAllResponse, error) {
	rsp, err := c.V1AuthSignOutAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthSignOutAllResponse(rsp)
}

// V1AuthSignUpWithBodyWithResponse request with arbitrary body returning *V1AuthSignUpResponse
func (c *ClientWithResponses) V1AuthSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AuthSignUpResponse, error) {
	rsp, err := c.V1AuthSignUpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthSignUpResponse(rsp)
}

func (c *ClientWithResponses) V1AuthSignUpWithResponse(ctx context.Context, body V1AuthSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AuthSignUpResponse, error) {
	rsp, err := c.V1AuthSignUp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthSignUpResponse(rsp)
}

// V1AuthVerifyWithResponse request returning *V1AuthVerifyResponse
func (c *ClientWithResponses) V1AuthVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1AuthVerifyResponse, error) {
	rsp, err := c.V1AuthVerify(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1AuthVerifyResponse(rsp)
}

// V1HealthAPIWithResponse request returning *V1HealthAPIResponse
func (c *ClientWithResponses) V1HealthAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1HealthAPIResponse, error) {
	rsp, err := c.V1HealthAPI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1HealthAPIResponse(rsp)
}

// V1HealthCoreWithResponse request returning *V1HealthCoreResponse
func (c *ClientWithResponses) V1HealthCoreWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V1HealthCoreResponse, error) {
	rsp, err := c.V1HealthCore(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1HealthCoreResponse(rsp)
}

// V1InternalArticleShareWithBodyWithResponse request with arbitrary body returning *V1InternalArticleShareResponse
func (c *ClientWithResponses) V1InternalArticleShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1InternalArticleShareResponse, error) {
	rsp, err := c.V1InternalArticleShareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1InternalArticleShareResponse(rsp)
}

func (c *ClientWithResponses) V1InternalArticleShareWithResponse(ctx context.Context, body V1InternalArticleShareJSONRequestBody, reqEditors ...RequestEditorFn) (*V1InternalArticleShareResponse, error) {
	rsp, err := c.V1InternalArticleShare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1InternalArticleShareResponse(rsp)
}

// V1InternalArticleDeleteWithResponse request returning *V1InternalArticleDeleteResponse
func (c *ClientWithResponses) V1InternalArticleDeleteWithResponse(ctx context.Context, articleId openapi_types.UUID, reqEditors ...RequestEditorFn) (*V1InternalArticleDeleteResponse, error) {
	rsp, err := c.V1InternalArticleDelete(ctx, articleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1InternalArticleDeleteResponse(rsp)
}

// ParseV1ArticleListResponse parses an HTTP response from a V1ArticleListWithResponse call
func ParseV1ArticleListResponse(rsp *http.Response) (*V1ArticleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ArticleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ArticleListResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV1ArticleShareResponse parses an HTTP response from a V1ArticleShareWithResponse call
func ParseV1ArticleShareResponse(rsp *http.Response) (*V1ArticleShareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ArticleShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1ArticleRemoveOwnResponse parses an HTTP response from a V1ArticleRemoveOwnWithResponse call
func ParseV1ArticleRemoveOwnResponse(rsp *http.Response) (*V1ArticleRemoveOwnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ArticleRemoveOwnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1ArticleAddOwnResponse parses an HTTP response from a V1ArticleAddOwnWithResponse call
func ParseV1ArticleAddOwnResponse(rsp *http.Response) (*V1ArticleAddOwnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ArticleAddOwnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthInviteResponse parses an HTTP response from a V1AuthInviteWithResponse call
func ParseV1AuthInviteResponse(rsp *http.Response) (*V1AuthInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AuthInviteResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV1AuthJoinResponse parses an HTTP response from a V1AuthJoinWithResponse call
func ParseV1AuthJoinResponse(rsp *http.Response) (*V1AuthJoinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ArticleListResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV1AuthChangePasswordResponse parses an HTTP response from a V1AuthChangePasswordWithResponse call
func ParseV1AuthChangePasswordResponse(rsp *http.Response) (*V1AuthChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthRefreshResponse parses an HTTP response from a V1AuthRefreshWithResponse call
func ParseV1AuthRefreshResponse(rsp *http.Response) (*V1AuthRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthSignInResponse parses an HTTP response from a V1AuthSignInWithResponse call
func ParseV1AuthSignInResponse(rsp *http.Response) (*V1AuthSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthSignOutResponse parses an HTTP response from a V1AuthSignOutWithResponse call
func ParseV1AuthSignOutResponse(rsp *http.Response) (*V1AuthSignOutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthSignOutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthSignOutAllResponse parses an HTTP response from a V1AuthSignOutAllWithResponse call
func ParseV1AuthSignOutAllResponse(rsp *http.Response) (*V1AuthSignOutAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthSignOutAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthSignUpResponse parses an HTTP response from a V1AuthSignUpWithResponse call
func ParseV1AuthSignUpResponse(rsp *http.Response) (*V1AuthSignUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthSignUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1AuthVerifyResponse parses an HTTP response from a V1AuthVerifyWithResponse call
func ParseV1AuthVerifyResponse(rsp *http.Response) (*V1AuthVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AuthVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1AuthVerifyUnauthorizedResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseV1HealthAPIResponse parses an HTTP response from a V1HealthAPIWithResponse call
func ParseV1HealthAPIResponse(rsp *http.Response) (*V1HealthAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1HealthAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1HealthCoreResponse parses an HTTP response from a V1HealthCoreWithResponse call
func ParseV1HealthCoreResponse(rsp *http.Response) (*V1HealthCoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1HealthCoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1InternalArticleShareResponse parses an HTTP response from a V1InternalArticleShareWithResponse call
func ParseV1InternalArticleShareResponse(rsp *http.Response) (*V1InternalArticleShareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1InternalArticleShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1InternalArticleDeleteResponse parses an HTTP response from a V1InternalArticleDeleteWithResponse call
func ParseV1InternalArticleDeleteResponse(rsp *http.Response) (*V1InternalArticleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1InternalArticleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
