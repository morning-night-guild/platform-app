// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 記事一覧
	// (GET /v1/articles)
	V1ArticleList(w http.ResponseWriter, r *http.Request, params V1ArticleListParams)
	// 記事共有
	// (POST /v1/articles)
	V1ArticleShare(w http.ResponseWriter, r *http.Request)
	// リフレッシュ
	// (GET /v1/auth/refresh)
	V1AuthRefresh(w http.ResponseWriter, r *http.Request, params V1AuthRefreshParams)
	// サインイン
	// (POST /v1/auth/signin)
	V1AuthSignIn(w http.ResponseWriter, r *http.Request)
	// サインアウト
	// (GET /v1/auth/signout)
	V1AuthSignOut(w http.ResponseWriter, r *http.Request)
	// サインアップ
	// (POST /v1/auth/signup)
	V1AuthSignUp(w http.ResponseWriter, r *http.Request)
	// 検証
	// (GET /v1/auth/verify)
	V1AuthVerify(w http.ResponseWriter, r *http.Request)
	// apiヘルスチェック
	// (GET /v1/health/api)
	V1HealthAPI(w http.ResponseWriter, r *http.Request)
	// coreヘルスチェック
	// (GET /v1/health/core)
	V1HealthCore(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// V1ArticleList operation middleware
func (siw *ServerInterfaceWrapper) V1ArticleList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, AuthTokenCookieScopes, []string{""})

	ctx = context.WithValue(ctx, SessionTokenCookieScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ArticleListParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "maxPageSize" -------------

	if paramValue := r.URL.Query().Get("maxPageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "maxPageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "maxPageSize", r.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxPageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1ArticleList(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1ArticleShare operation middleware
func (siw *ServerInterfaceWrapper) V1ArticleShare(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1ArticleShare(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1AuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) V1AuthRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionTokenCookieScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1AuthRefreshParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "signature" -------------

	if paramValue := r.URL.Query().Get("signature"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "signature"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "signature", r.URL.Query(), &params.Signature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "signature", Err: err})
		return
	}

	// ------------- Optional query parameter "expiresIn" -------------

	err = runtime.BindQueryParameter("form", true, false, "expiresIn", r.URL.Query(), &params.ExpiresIn)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expiresIn", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1AuthRefresh(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1AuthSignIn operation middleware
func (siw *ServerInterfaceWrapper) V1AuthSignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1AuthSignIn(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1AuthSignOut operation middleware
func (siw *ServerInterfaceWrapper) V1AuthSignOut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthTokenCookieScopes, []string{""})

	ctx = context.WithValue(ctx, SessionTokenCookieScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1AuthSignOut(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1AuthSignUp operation middleware
func (siw *ServerInterfaceWrapper) V1AuthSignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1AuthSignUp(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1AuthVerify operation middleware
func (siw *ServerInterfaceWrapper) V1AuthVerify(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthTokenCookieScopes, []string{""})

	ctx = context.WithValue(ctx, SessionTokenCookieScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1AuthVerify(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1HealthAPI operation middleware
func (siw *ServerInterfaceWrapper) V1HealthAPI(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1HealthAPI(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1HealthCore operation middleware
func (siw *ServerInterfaceWrapper) V1HealthCore(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1HealthCore(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/articles", wrapper.V1ArticleList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/articles", wrapper.V1ArticleShare)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/auth/refresh", wrapper.V1AuthRefresh)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/auth/signin", wrapper.V1AuthSignIn)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/auth/signout", wrapper.V1AuthSignOut)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/auth/signup", wrapper.V1AuthSignUp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/auth/verify", wrapper.V1AuthVerify)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health/api", wrapper.V1HealthAPI)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health/core", wrapper.V1HealthCore)
	})

	return r
}
