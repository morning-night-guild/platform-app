services:
  redis:
    container_name: ${APP_NAME}-redis
    image: redis:7.0.10-alpine
    ports:
      - ${REDIS_PORT}:6379
    restart: always
  firebase:
    container_name: ${APP_NAME}-firebase
    build:
      context: .
      dockerfile: firebase/Dockerfile
    ports:
      - ${FIREBASE_PORT}:9099
    volumes:
      - ./firebase:/firebase
    restart: always
  postgres-primary:
    container_name: ${APP_NAME}-postgres-primary
    image: postgres:14.7-alpine
    ports:
      - ${PRIMARY_DB_PORT}:5432
    environment:
      TZ: UTC
      LANG: ja_JP.UTF-8
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      POSTGRES_HOST_AUTH_METHOD: trust
    restart: always
  postgres-secondary:
    container_name: ${APP_NAME}-postgres-secondary
    image: postgres:14.7-alpine
    ports:
      - ${SECONDARY_DB_PORT}:5432
    environment:
      TZ: UTC
      LANG: ja_JP.UTF-8
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      POSTGRES_HOST_AUTH_METHOD: trust
    restart: always
  db-migrate:
    container_name: ${APP_NAME}-db-migrate
    build:
      context: .
      dockerfile: db/migrate/Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres-primary:5432/postgres?sslmode=disable
    volumes:
      - ../:/app
    restart: always
    depends_on:
      - postgres-primary
  db-backup:
    container_name: ${APP_NAME}-db-backup
    build:
      context: .
      dockerfile: db/backup/Dockerfile
    environment:
      PRIMARY_DATABASE_URL: postgres://postgres:postgres@postgres-primary:5432/postgres?sslmode=disable
      SECONDARY_DATABASE_URL: postgres://postgres:postgres@postgres-secondary:5432/postgres?sslmode=disable
    volumes:
      - ../:/app
    restart: always
    depends_on:
      - postgres-primary
  app-core:
    container_name: ${APP_NAME}-app-core
    build:
      context: .
      dockerfile: app/core/Dockerfile
    ports:
      - ${APP_CORE_PORT}:8080
    environment:
      ENV: ${ENV}
      DATABASE_URL: postgres://postgres:postgres@postgres-primary:5432/postgres?sslmode=disable
      NEWRELIC_APP_NAME: ${NEWRELIC_APP_NAME}
      NEWRELIC_LICENSE: ${NEWRELIC_LICENSE}
    volumes:
      - ../:/app
    restart: always
    depends_on:
      - postgres-primary
  app-api:
    container_name: ${APP_NAME}-app-api
    build:
      context: .
      dockerfile: app/api/Dockerfile
    ports:
      - ${APP_API_PORT}:8080
    environment:
      ENV: ${ENV}
      API_KEY: ${API_KEY}
      APP_CORE_URL: http://app-core:8080
      NEWRELIC_APP_NAME: ${NEWRELIC_APP_NAME}
      NEWRELIC_LICENSE: ${NEWRELIC_LICENSE}
      CORS_ALLOW_ORIGINS: http://localhost:5173
      CORS_DEBUG_ENABLE: false
      REDIS_URL: redis:6379
      JWT_SECRET: secret
      COOKIE_DOMAIN: localhost
      FIREBASE_SECRET: '{"type": "service_account","project_id": "emulator"}'
      FIREBASE_API_ENDPOINT: http://firebase:9099/identitytoolkit.googleapis.com
      FIREBASE_API_KEY: emulator
      FIREBASE_AUTH_EMULATOR_HOST: firebase:9099
    volumes:
      - ../:/app
    restart: always
    depends_on:
      - app-core
      - redis
      - firebase
