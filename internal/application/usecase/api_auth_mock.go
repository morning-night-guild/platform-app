// Code generated by MockGen. DO NOT EDIT.
// Source: api_auth.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIAuth is a mock of APIAuth interface.
type MockAPIAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAPIAuthMockRecorder
}

// MockAPIAuthMockRecorder is the mock recorder for MockAPIAuth.
type MockAPIAuthMockRecorder struct {
	mock *MockAPIAuth
}

// NewMockAPIAuth creates a new mock instance.
func NewMockAPIAuth(ctrl *gomock.Controller) *MockAPIAuth {
	mock := &MockAPIAuth{ctrl: ctrl}
	mock.recorder = &MockAPIAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIAuth) EXPECT() *MockAPIAuthMockRecorder {
	return m.recorder
}

// GenerateCode mocks base method.
func (m *MockAPIAuth) GenerateCode(arg0 context.Context, arg1 APIAuthGenerateCodeInput) (APIAuthGenerateCodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCode", arg0, arg1)
	ret0, _ := ret[0].(APIAuthGenerateCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCode indicates an expected call of GenerateCode.
func (mr *MockAPIAuthMockRecorder) GenerateCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCode", reflect.TypeOf((*MockAPIAuth)(nil).GenerateCode), arg0, arg1)
}

// Refresh mocks base method.
func (m *MockAPIAuth) Refresh(arg0 context.Context, arg1 APIAuthRefreshInput) (APIAuthRefreshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].(APIAuthRefreshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAPIAuthMockRecorder) Refresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAPIAuth)(nil).Refresh), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockAPIAuth) SignIn(arg0 context.Context, arg1 APIAuthSignInInput) (APIAuthSignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(APIAuthSignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAPIAuthMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAPIAuth)(nil).SignIn), arg0, arg1)
}

// SignOut mocks base method.
func (m *MockAPIAuth) SignOut(arg0 context.Context, arg1 APIAuthSignOutInput) (APIAuthSignOutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", arg0, arg1)
	ret0, _ := ret[0].(APIAuthSignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAPIAuthMockRecorder) SignOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAPIAuth)(nil).SignOut), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockAPIAuth) SignUp(arg0 context.Context, arg1 APIAuthSignUpInput) (APIAuthSignUpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(APIAuthSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAPIAuthMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAPIAuth)(nil).SignUp), arg0, arg1)
}

// Verify mocks base method.
func (m *MockAPIAuth) Verify(arg0 context.Context, arg1 APIAuthVerifyInput) (APIAuthVerifyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(APIAuthVerifyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAPIAuthMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAPIAuth)(nil).Verify), arg0, arg1)
}
