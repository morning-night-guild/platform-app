// Code generated by MockGen. DO NOT EDIT.
// Source: core_user.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoreUser is a mock of CoreUser interface.
type MockCoreUser struct {
	ctrl     *gomock.Controller
	recorder *MockCoreUserMockRecorder
}

// MockCoreUserMockRecorder is the mock recorder for MockCoreUser.
type MockCoreUserMockRecorder struct {
	mock *MockCoreUser
}

// NewMockCoreUser creates a new mock instance.
func NewMockCoreUser(ctrl *gomock.Controller) *MockCoreUser {
	mock := &MockCoreUser{ctrl: ctrl}
	mock.recorder = &MockCoreUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreUser) EXPECT() *MockCoreUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCoreUser) Create(arg0 context.Context, arg1 CoreUserCreateInput) (CoreUserCreateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(CoreUserCreateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCoreUserMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoreUser)(nil).Create), arg0, arg1)
}

// Update mocks base method.
func (m *MockCoreUser) Update(arg0 context.Context, arg1 CoreUserUpdateInput) (CoreUserUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(CoreUserUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCoreUserMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCoreUser)(nil).Update), arg0, arg1)
}
