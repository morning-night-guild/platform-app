// Code generated by MockGen. DO NOT EDIT.
// Source: core_article.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoreArticle is a mock of CoreArticle interface.
type MockCoreArticle struct {
	ctrl     *gomock.Controller
	recorder *MockCoreArticleMockRecorder
}

// MockCoreArticleMockRecorder is the mock recorder for MockCoreArticle.
type MockCoreArticleMockRecorder struct {
	mock *MockCoreArticle
}

// NewMockCoreArticle creates a new mock instance.
func NewMockCoreArticle(ctrl *gomock.Controller) *MockCoreArticle {
	mock := &MockCoreArticle{ctrl: ctrl}
	mock.recorder = &MockCoreArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreArticle) EXPECT() *MockCoreArticleMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCoreArticle) List(arg0 context.Context, arg1 CoreArticleListInput) (CoreArticleListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(CoreArticleListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCoreArticleMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCoreArticle)(nil).List), arg0, arg1)
}

// Share mocks base method.
func (m *MockCoreArticle) Share(arg0 context.Context, arg1 CoreArticleShareInput) (CoreArticleShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Share", arg0, arg1)
	ret0, _ := ret[0].(CoreArticleShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Share indicates an expected call of Share.
func (mr *MockCoreArticleMockRecorder) Share(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockCoreArticle)(nil).Share), arg0, arg1)
}
