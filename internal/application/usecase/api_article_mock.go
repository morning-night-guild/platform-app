// Code generated by MockGen. DO NOT EDIT.
// Source: api_article.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIArticle is a mock of APIArticle interface.
type MockAPIArticle struct {
	ctrl     *gomock.Controller
	recorder *MockAPIArticleMockRecorder
}

// MockAPIArticleMockRecorder is the mock recorder for MockAPIArticle.
type MockAPIArticleMockRecorder struct {
	mock *MockAPIArticle
}

// NewMockAPIArticle creates a new mock instance.
func NewMockAPIArticle(ctrl *gomock.Controller) *MockAPIArticle {
	mock := &MockAPIArticle{ctrl: ctrl}
	mock.recorder = &MockAPIArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIArticle) EXPECT() *MockAPIArticleMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockAPIArticle) List(arg0 context.Context, arg1 APIArticleListInput) (APIArticleListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(APIArticleListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAPIArticleMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAPIArticle)(nil).List), arg0, arg1)
}

// Share mocks base method.
func (m *MockAPIArticle) Share(arg0 context.Context, arg1 APIArticleShareInput) (APIArticleShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Share", arg0, arg1)
	ret0, _ := ret[0].(APIArticleShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Share indicates an expected call of Share.
func (mr *MockAPIArticleMockRecorder) Share(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockAPIArticle)(nil).Share), arg0, arg1)
}
