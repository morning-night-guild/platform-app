// Code generated by MockGen. DO NOT EDIT.
// Source: cookie.go

// Package handler is a generated GoMock package.
package handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCookie is a mock of Cookie interface.
type MockCookie struct {
	ctrl     *gomock.Controller
	recorder *MockCookieMockRecorder
}

// MockCookieMockRecorder is the mock recorder for MockCookie.
type MockCookieMockRecorder struct {
	mock *MockCookie
}

// NewMockCookie creates a new mock instance.
func NewMockCookie(ctrl *gomock.Controller) *MockCookie {
	mock := &MockCookie{ctrl: ctrl}
	mock.recorder = &MockCookieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookie) EXPECT() *MockCookieMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockCookie) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockCookieMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockCookie)(nil).Domain))
}

// SameSite mocks base method.
func (m *MockCookie) SameSite() http.SameSite {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SameSite")
	ret0, _ := ret[0].(http.SameSite)
	return ret0
}

// SameSite indicates an expected call of SameSite.
func (mr *MockCookieMockRecorder) SameSite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SameSite", reflect.TypeOf((*MockCookie)(nil).SameSite))
}

// Secure mocks base method.
func (m *MockCookie) Secure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Secure indicates an expected call of Secure.
func (mr *MockCookieMockRecorder) Secure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secure", reflect.TypeOf((*MockCookie)(nil).Secure))
}
