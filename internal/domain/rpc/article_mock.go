// Code generated by MockGen. DO NOT EDIT.
// Source: article.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/morning-night-guild/platform-app/internal/domain/model"
	article "github.com/morning-night-guild/platform-app/internal/domain/model/article"
	user "github.com/morning-night-guild/platform-app/internal/domain/model/user"
	value "github.com/morning-night-guild/platform-app/internal/domain/value"
)

// MockArticle is a mock of Article interface.
type MockArticle struct {
	ctrl     *gomock.Controller
	recorder *MockArticleMockRecorder
}

// MockArticleMockRecorder is the mock recorder for MockArticle.
type MockArticleMockRecorder struct {
	mock *MockArticle
}

// NewMockArticle creates a new mock instance.
func NewMockArticle(ctrl *gomock.Controller) *MockArticle {
	mock := &MockArticle{ctrl: ctrl}
	mock.recorder = &MockArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticle) EXPECT() *MockArticleMockRecorder {
	return m.recorder
}

// AddToUser mocks base method.
func (m *MockArticle) AddToUser(arg0 context.Context, arg1 article.ID, arg2 user.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToUser indicates an expected call of AddToUser.
func (mr *MockArticleMockRecorder) AddToUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToUser", reflect.TypeOf((*MockArticle)(nil).AddToUser), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockArticle) Delete(arg0 context.Context, arg1 article.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticle)(nil).Delete), arg0, arg1)
}

// List mocks base method.
func (m *MockArticle) List(arg0 context.Context, arg1 value.Index, arg2 value.Size, arg3 ...value.Filter) ([]model.Article, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockArticleMockRecorder) List(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArticle)(nil).List), varargs...)
}

// ListByUser mocks base method.
func (m *MockArticle) ListByUser(arg0 context.Context, arg1 user.ID, arg2 value.Index, arg3 value.Size, arg4 ...value.Filter) ([]model.Article, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByUser", varargs...)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockArticleMockRecorder) ListByUser(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockArticle)(nil).ListByUser), varargs...)
}

// Share mocks base method.
func (m *MockArticle) Share(arg0 context.Context, arg1 article.URL, arg2 article.Title, arg3 article.Description, arg4 article.Thumbnail) (model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Share", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Share indicates an expected call of Share.
func (mr *MockArticleMockRecorder) Share(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockArticle)(nil).Share), arg0, arg1, arg2, arg3, arg4)
}
